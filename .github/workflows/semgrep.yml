name: Semgrep

on:
  pull_request: {}
  push:
    branches:
    - main
    paths:
    - .github/workflows/semgrep.yml
  schedule:
  - cron: '0 0 * * 0'

jobs:
  semgrep:
    name: Scan
    runs-on: ubuntu-20.04
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: returntocorp/semgrep
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Find PyPI dependencies
      run: |
        semgrep ci
        semgrep --config ./.github/semgrep/rule.yml --output ./.github/semgrep/scan_results.json --json
    - name: Detect vulnerable dependencies
      # run: python3 ./.github/semgrep/find_vulnerabilities.py
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import json
          import os
          import urllib.request as request

          def versions(package_name):
              url = "https://pypi.org/pypi/%s/json" % (package_name,)
              data = json.load(request.urlopen(url))
              versions = sorted(data["releases"].keys(), reverse=True)
              return versions

          def vulnerable(package_name, version):
            body = {
                "version": version,
                "package": {
                    "name": package_name, 
                    "ecosystem": "PyPI"
                    }
                }
            headers = {
                "Content-Type": "application/json",
                "Accept": "application/json",
                }

            data = json.dumps(body).encode("utf-8")
            url = "https://api.osv.dev/v1/query"

            req = request.Request(url, data, headers)
            response = request.urlopen(req)

            with response as f:
                return json.loads(f.read().decode())

          path = os.path.dirname(os.path.abspath(__file__))

          try:
              vulnerable_packages = []

              file = open(path + "/scan_results.json")
              output = json.load(file)

              for package in output["results"]:
                  name = package["extra"]["metavars"]["$1"]["abstract_content"]
                  qualifier = package["extra"]["metavars"]["$2"]["abstract_content"]
                  version = package["extra"]["metavars"]["$3"]["abstract_content"]

                  try:
                      available_versions = versions(name)
                      used_versions = None

                      if qualifier == ">":
                          used_versions = available_versions.filter(lambda v: v > version)
                      elif qualifier == "<":
                          used_versions = available_versions.filter(lambda v: v < version)
                      elif qualifier == ">=":
                          used_versions = available_versions.filter(lambda v: v >= version)
                      elif qualifier == "<=":
                          used_versions = available_versions.filter(lambda v: v <= version)
                      elif qualifier == "==":
                          if version in available_versions:
                              used_versions = [version]
                      elif qualifier == "~=":
                          for available_version in available_versions:
                              if available_version > version:
                                  used_versions.append(available_version)
                      else:
                          print("Unknown qualifier: " + qualifier)
                          pass

                      for used_version in used_versions:
                          vulnerable_response = vulnerable(name, used_version)
                          if len(vulnerable_response) > 0:
                              vulnerable_packages.append(name + ": " + str(used_version))
                      
                  except Exception as e:
                      print("Package " + name + " not on PyPi.")
          except Exception as e:
              print(e)

          print("Vulnerable packages: ", vulnerable_packages)

          if len(vulnerable_packages > 0):
            warning("Vulnerable packages detected.")

